[
["relational-data.html", "10 Relational Data 10.1 Prerequisites 10.2 nycflights13 10.3 Keys 10.4 Mutating Joins 10.5 Filtering Joins 10.6 Set operations", " 10 Relational Data 10.1 Prerequisites library(&quot;tidyverse&quot;) library(&quot;nycflights13&quot;) 10.2 nycflights13 10.2.1 Exercises Imagine you wanted to draw (approximately) the route each plane flies from its origin to its destination. What variables would you need? What tables would you need to combine? flights table: origin and dest airports table: longitude and latitude variables We would merge the flights with airports twice: once to get the location of the origin airport, and once to get the location of the dest airport. I forgot to draw the relationship between weather and airports. What is the relationship and how should it appear in the diagram? The variable origin in weather is matched with faa in airports. weather only contains information for the origin (NYC) airports. If it contained weather records for all airports in the USA, what additional relation would it define with flights? year, month, day, hour, origin in weather would be matched to year, month, day, hour, dest in flight (though it should use the arrival date-time values for dest if possible). We know that some days of the year are “special”, and fewer people than usual fly on them. How might you represent that data as a data frame? What would be the primary keys of that table? How would it connect to the existing tables? I would add a table of special dates. The primary key would be date. It would match to the year, month, day columns of `flights. 10.3 Keys Add a surrogate key to flights. I add the column flight_id as a surrogate key. I sort the data prior to making the key, even though it is not strictly necessary, so the order of the rows has some meaning. flights %&gt;% arrange(year, month, day, sched_dep_time, carrier, flight) %&gt;% mutate(flight_id = row_number()) %&gt;% glimpse() #&gt; Observations: 336,776 #&gt; Variables: 20 #&gt; $ year &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013,... #&gt; $ month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... #&gt; $ day &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... #&gt; $ dep_time &lt;int&gt; 517, 533, 542, 544, 554, 559, 558, 559, 558, 55... #&gt; $ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 558, 559, 600, 600, 600, 60... #&gt; $ dep_delay &lt;dbl&gt; 2, 4, 2, -1, -4, 0, -2, -1, -2, -2, -3, NA, 1, ... #&gt; $ arr_time &lt;int&gt; 830, 850, 923, 1004, 740, 702, 753, 941, 849, 8... #&gt; $ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 728, 706, 745, 910, 851, 8... #&gt; $ arr_delay &lt;dbl&gt; 11, 20, 33, -18, 12, -4, 8, 31, -2, -3, -8, NA,... #&gt; $ carrier &lt;chr&gt; &quot;UA&quot;, &quot;UA&quot;, &quot;AA&quot;, &quot;B6&quot;, &quot;UA&quot;, &quot;B6&quot;, &quot;AA&quot;, &quot;AA&quot;,... #&gt; $ flight &lt;int&gt; 1545, 1714, 1141, 725, 1696, 1806, 301, 707, 49... #&gt; $ tailnum &lt;chr&gt; &quot;N14228&quot;, &quot;N24211&quot;, &quot;N619AA&quot;, &quot;N804JB&quot;, &quot;N39463... #&gt; $ origin &lt;chr&gt; &quot;EWR&quot;, &quot;LGA&quot;, &quot;JFK&quot;, &quot;JFK&quot;, &quot;EWR&quot;, &quot;JFK&quot;, &quot;LGA&quot;... #&gt; $ dest &lt;chr&gt; &quot;IAH&quot;, &quot;IAH&quot;, &quot;MIA&quot;, &quot;BQN&quot;, &quot;ORD&quot;, &quot;BOS&quot;, &quot;ORD&quot;... #&gt; $ air_time &lt;dbl&gt; 227, 227, 160, 183, 150, 44, 138, 257, 149, 158... #&gt; $ distance &lt;dbl&gt; 1400, 1416, 1089, 1576, 719, 187, 733, 1389, 10... #&gt; $ hour &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,... #&gt; $ minute &lt;dbl&gt; 15, 29, 40, 45, 58, 59, 0, 0, 0, 0, 0, 0, 0, 0,... #&gt; $ time_hour &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013... #&gt; $ flight_id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ... Identify the keys in the following datasets Lahman::Batting babynames::babynames nasaweather::atmos fueleconomy::vehicles ggplot2::diamonds (You might need to install some packages and read some documentation.) The primary key for Lahman::Batting is playerID, yearID, stint. It is not simply playerID, yearID because players can have different stints in different leagues within the same year. Lahman::Batting %&gt;% group_by(playerID, yearID, stint) %&gt;% filter(n() &gt; 1) %&gt;% nrow() #&gt; [1] 0 The primary key for babynames::babynames is year, sex, name. It is no simply year, name since names can appear for both sexes with different counts. babynames::babynames %&gt;% group_by(year, sex, name) %&gt;% filter(n() &gt; 1) %&gt;% nrow() #&gt; [1] 0 The primary key for nasaweather::atmos is the location and time of the measurement: lat, long, year, month. nasaweather::atmos %&gt;% group_by(lat, long, year, month) %&gt;% filter(n() &gt; 1) %&gt;% nrow() #&gt; [1] 0 The column id (unique EPA identifier) is the primary key for fueleconomy::vehicles: fueleconomy::vehicles %&gt;% group_by(id) %&gt;% filter(n() &gt; 1) %&gt;% nrow() #&gt; [1] 0 There is no primary key for ggplot2::diamonds. Using all variables in the data frame, the number of distinct rows is less than the total number of rows, meaning no combination of variables uniquely identifies the observations. ggplot2::diamonds %&gt;% distinct() %&gt;% nrow() #&gt; [1] 53794 nrow(ggplot2::diamonds) #&gt; [1] 53940 Draw a diagram illustrating the connections between the Batting, Master, and Salaries tables in the Lahman package. Draw another diagram that shows the relationship between Master, Managers, AwardsManagers. Batting primary key: playerID, yearID, stint foreign keys: playerID -&gt; Master.playerID Master primary key: playerID Salaries primary key: yearID, teamID, playerID foreign keys: playerID -&gt; Master.playerID Managers: primary key: yearID, playerID, teamID, inseason foreign keys: playerID -&gt; Master.teamID Managers: primary key: awardID, yearID AwardsManagers: primary key: playerID, awardID, yearID (since there are ties and while tie distinguishes those awards it has NA values) foreign keys: playerID -&gt; Master.playerID playerID, yearID, lgID -&gt; Managers.playerID, yearID, lgID lgID and teamID appear in multiple tables, but should be primary keys for league and team tables. How would you characterise the relationship between the Batting, Pitching, and Fielding tables? 10.4 Mutating Joins flights2 &lt;- flights %&gt;% select(year:day, hour, origin, dest, tailnum, carrier) flights2 %&gt;% select(-origin, -dest) %&gt;% left_join(airlines, by = &quot;carrier&quot;) #&gt; # A tibble: 336,776 x 7 #&gt; year month day hour tailnum carrier name #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 2013 1 1 5.00 N14228 UA United Air Lines Inc. #&gt; 2 2013 1 1 5.00 N24211 UA United Air Lines Inc. #&gt; 3 2013 1 1 5.00 N619AA AA American Airlines Inc. #&gt; 4 2013 1 1 5.00 N804JB B6 JetBlue Airways #&gt; 5 2013 1 1 6.00 N668DN DL Delta Air Lines Inc. #&gt; 6 2013 1 1 5.00 N39463 UA United Air Lines Inc. #&gt; # ... with 3.368e+05 more rows 10.4.1 Exercises Compute the average delay by destination, then join on the airports data frame so you can show the spatial distribution of delays. Here’s an easy way to draw a map of the United States: airports %&gt;% semi_join(flights, c(&quot;faa&quot; = &quot;dest&quot;)) %&gt;% ggplot(aes(lon, lat)) + borders(&quot;state&quot;) + geom_point() + coord_quickmap() (Don’t worry if you don’t understand what semi_join() does — you’ll learn about it next.) avg_dest_delays &lt;- flights %&gt;% group_by(dest) %&gt;% # arrival delay NA&#39;s are cancelled flights summarise(delay = mean(arr_delay, na.rm = TRUE)) %&gt;% inner_join(airports, by = c(dest = &quot;faa&quot;)) avg_dest_delays %&gt;% ggplot(aes(lon, lat, colour = delay)) + borders(&quot;state&quot;) + geom_point() + coord_quickmap() You might want to use the size or colour of the points to display the average delay for each airport. Add the location of the origin and destination (i.e. the lat and lon) to flights. flights %&gt;% left_join(airports, by = c(dest = &quot;faa&quot;)) %&gt;% left_join(airports, by = c(origin = &quot;faa&quot;)) %&gt;% head() #&gt; # A tibble: 6 x 33 #&gt; year month day dep_t… sche… dep_… arr_… sche… arr_… carr… flig… tail… #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; #&gt; 1 2013 1 1 517 515 2.00 830 819 11.0 UA 1545 N142… #&gt; 2 2013 1 1 533 529 4.00 850 830 20.0 UA 1714 N242… #&gt; 3 2013 1 1 542 540 2.00 923 850 33.0 AA 1141 N619… #&gt; 4 2013 1 1 544 545 -1.00 1004 1022 -18.0 B6 725 N804… #&gt; 5 2013 1 1 554 600 -6.00 812 837 -25.0 DL 461 N668… #&gt; 6 2013 1 1 554 558 -4.00 740 728 12.0 UA 1696 N394… #&gt; # ... with 21 more variables: origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, #&gt; # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, name.x #&gt; # &lt;chr&gt;, lat.x &lt;dbl&gt;, lon.x &lt;dbl&gt;, alt.x &lt;int&gt;, tz.x &lt;dbl&gt;, dst.x &lt;chr&gt;, #&gt; # tzone.x &lt;chr&gt;, name.y &lt;chr&gt;, lat.y &lt;dbl&gt;, lon.y &lt;dbl&gt;, alt.y &lt;int&gt;, #&gt; # tz.y &lt;dbl&gt;, dst.y &lt;chr&gt;, tzone.y &lt;chr&gt; Is there a relationship between the age of a plane and its delays? Suprisingly not. If anything (departure) delay seems to decrease slightly with age (perhaps because of selection): plane_ages &lt;- planes %&gt;% mutate(age = 2013 - year) %&gt;% select(tailnum, age) flights %&gt;% inner_join(plane_ages, by = &quot;tailnum&quot;) %&gt;% group_by(age) %&gt;% filter(!is.na(dep_delay)) %&gt;% summarise(delay = mean(dep_delay)) %&gt;% ggplot(aes(x = age, y = delay)) + geom_point() + geom_line() #&gt; Warning: Removed 1 rows containing missing values (geom_point). #&gt; Warning: Removed 1 rows containing missing values (geom_path). What weather conditions make it more likely to see a delay? Almost any amount or precipitation is associated with a delay, though not as strong a trend after 0.02 in as one would expect flight_weather &lt;- flights %&gt;% inner_join(weather, by = c(&quot;origin&quot; = &quot;origin&quot;, &quot;year&quot; = &quot;year&quot;, &quot;month&quot; = &quot;month&quot;, &quot;day&quot; = &quot;day&quot;, &quot;hour&quot; = &quot;hour&quot;)) flight_weather %&gt;% group_by(precip) %&gt;% summarise(delay = mean(dep_delay, na.rm = TRUE)) %&gt;% ggplot(aes(x = precip, y = delay)) + geom_line() + geom_point() What happened on June 13 2013? Display the spatial pattern of delays, and then use Google to cross-reference with the weather. There was a large series of storms (derechos) in the southeastern US (see June 12-13, 2013 derecho series) The largest delays are in Tennessee (Nashville) and the Southeaste and Midwest (the location of the derechos). library(viridis) flights %&gt;% filter(year == 2013, month == 6, day == 13) %&gt;% group_by(dest) %&gt;% summarise(delay = mean(arr_delay, na.rm = TRUE)) %&gt;% inner_join(airports, by = c(&quot;dest&quot; = &quot;faa&quot;)) %&gt;% ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) + borders(&quot;state&quot;) + geom_point() + coord_quickmap() + scale_color_viridis() #&gt; Warning: Removed 3 rows containing missing values (geom_point). 10.5 Filtering Joins semi_join: keep all obs in x with match in y anti_join: drop all obs in x with a match in y 10.5.1 Exercises What does it mean for a flight to have a missing tailnum? What do the tail numbers that don’t have a matching record in planes have in common? (Hint: one variable explains ~90% of the problems.) American Airlines (AA) and Envoy Airlines (MQ) don’t report tail numbers. flights %&gt;% anti_join(planes, by = &quot;tailnum&quot;) %&gt;% count(carrier, sort = TRUE) #&gt; # A tibble: 10 x 2 #&gt; carrier n #&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 MQ 25397 #&gt; 2 AA 22558 #&gt; 3 UA 1693 #&gt; 4 9E 1044 #&gt; 5 B6 830 #&gt; 6 US 699 #&gt; # ... with 4 more rows Filter flights to only show flights with planes that have flown at least 100 flights. planes_gt100 &lt;- filter(flights) %&gt;% group_by(tailnum) %&gt;% count() %&gt;% filter(n &gt; 100) flights %&gt;% semi_join(planes_gt100, by = &quot;tailnum&quot;) #&gt; # A tibble: 229,202 x 19 #&gt; year month day dep_t… sche… dep_… arr_… sche… arr_… carr… flig… tail… #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; #&gt; 1 2013 1 1 517 515 2.00 830 819 11.0 UA 1545 N142… #&gt; 2 2013 1 1 533 529 4.00 850 830 20.0 UA 1714 N242… #&gt; 3 2013 1 1 544 545 -1.00 1004 1022 -18.0 B6 725 N804… #&gt; 4 2013 1 1 554 558 -4.00 740 728 12.0 UA 1696 N394… #&gt; 5 2013 1 1 555 600 -5.00 913 854 19.0 B6 507 N516… #&gt; 6 2013 1 1 557 600 -3.00 709 723 -14.0 EV 5708 N829… #&gt; # ... with 2.292e+05 more rows, and 7 more variables: origin &lt;chr&gt;, dest #&gt; # &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, #&gt; # time_hour &lt;dttm&gt; Combine fueleconomy::vehicles and fueleconomy::common to find only the records for the most common models. The table fueleconomy::common identifies vehicles by make and model: glimpse(fueleconomy::vehicles) #&gt; Observations: 33,442 #&gt; Variables: 12 #&gt; $ id &lt;int&gt; 27550, 28426, 27549, 28425, 1032, 1033, 3347, 13309, 133... #&gt; $ make &lt;chr&gt; &quot;AM General&quot;, &quot;AM General&quot;, &quot;AM General&quot;, &quot;AM General&quot;, ... #&gt; $ model &lt;chr&gt; &quot;DJ Po Vehicle 2WD&quot;, &quot;DJ Po Vehicle 2WD&quot;, &quot;FJ8c Post Off... #&gt; $ year &lt;int&gt; 1984, 1984, 1984, 1984, 1985, 1985, 1987, 1997, 1997, 19... #&gt; $ class &lt;chr&gt; &quot;Special Purpose Vehicle 2WD&quot;, &quot;Special Purpose Vehicle ... #&gt; $ trans &lt;chr&gt; &quot;Automatic 3-spd&quot;, &quot;Automatic 3-spd&quot;, &quot;Automatic 3-spd&quot;,... #&gt; $ drive &lt;chr&gt; &quot;2-Wheel Drive&quot;, &quot;2-Wheel Drive&quot;, &quot;2-Wheel Drive&quot;, &quot;2-Wh... #&gt; $ cyl &lt;int&gt; 4, 4, 6, 6, 4, 6, 6, 4, 4, 6, 4, 4, 6, 4, 4, 6, 5, 5, 6,... #&gt; $ displ &lt;dbl&gt; 2.5, 2.5, 4.2, 4.2, 2.5, 4.2, 3.8, 2.2, 2.2, 3.0, 2.3, 2... #&gt; $ fuel &lt;chr&gt; &quot;Regular&quot;, &quot;Regular&quot;, &quot;Regular&quot;, &quot;Regular&quot;, &quot;Regular&quot;, &quot;... #&gt; $ hwy &lt;int&gt; 17, 17, 13, 13, 17, 13, 21, 26, 28, 26, 27, 29, 26, 27, ... #&gt; $ cty &lt;int&gt; 18, 18, 13, 13, 16, 13, 14, 20, 22, 18, 19, 21, 17, 20, ... glimpse(fueleconomy::common) #&gt; Observations: 347 #&gt; Variables: 4 #&gt; $ make &lt;chr&gt; &quot;Acura&quot;, &quot;Acura&quot;, &quot;Acura&quot;, &quot;Acura&quot;, &quot;Acura&quot;, &quot;Audi&quot;, &quot;Au... #&gt; $ model &lt;chr&gt; &quot;Integra&quot;, &quot;Legend&quot;, &quot;MDX 4WD&quot;, &quot;NSX&quot;, &quot;TSX&quot;, &quot;A4&quot;, &quot;A4 ... #&gt; $ n &lt;int&gt; 42, 28, 12, 28, 27, 49, 49, 66, 20, 12, 46, 20, 30, 29, ... #&gt; $ years &lt;int&gt; 16, 10, 12, 14, 11, 19, 15, 19, 19, 12, 20, 15, 16, 16, ... fueleconomy::vehicles %&gt;% semi_join(fueleconomy::common, by = c(&quot;make&quot;, &quot;model&quot;)) #&gt; # A tibble: 14,531 x 12 #&gt; id make model year class trans drive cyl displ fuel hwy cty #&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 1833 Acura Integ… 1986 Subc… Auto… Fron… 4 1.60 Regu… 28 22 #&gt; 2 1834 Acura Integ… 1986 Subc… Manu… Fron… 4 1.60 Regu… 28 23 #&gt; 3 3037 Acura Integ… 1987 Subc… Auto… Fron… 4 1.60 Regu… 28 22 #&gt; 4 3038 Acura Integ… 1987 Subc… Manu… Fron… 4 1.60 Regu… 28 23 #&gt; 5 4183 Acura Integ… 1988 Subc… Auto… Fron… 4 1.60 Regu… 27 22 #&gt; 6 4184 Acura Integ… 1988 Subc… Manu… Fron… 4 1.60 Regu… 28 23 #&gt; # ... with 1.452e+04 more rows Find the 48 hours (over the course of the whole year) that have the worst delays. Cross-reference it with the weather data. Can you see any patterns? flights %&gt;% group_by(year, month, day) %&gt;% summarise(total_24 = sum(dep_delay, na.rm = TRUE)+ sum(arr_delay, na.rm = TRUE)) %&gt;% mutate(total_48 = total_24 + lag(total_24)) %&gt;% arrange(desc(total_48)) #&gt; # A tibble: 365 x 5 #&gt; # Groups: year, month [12] #&gt; year month day total_24 total_48 #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 2013 7 23 80641 175419 #&gt; 2 2013 3 8 135264 167530 #&gt; 3 2013 6 25 80434 166649 #&gt; 4 2013 8 9 72866 165287 #&gt; 5 2013 6 28 81389 157910 #&gt; 6 2013 7 10 97120 157396 #&gt; # ... with 359 more rows What does anti_join(flights, airports, by = c(&quot;dest&quot; = &quot;faa&quot;)) tell you? What does anti_join(airports, flights, by = c(&quot;faa&quot; = &quot;dest&quot;)) tell you? anti_join(flights, airports, by = c(&quot;dest&quot; = &quot;faa&quot;)) are flights that go to an airport that is not in FAA list of destinations, likely foreign airports. anti_join(airports, flights, by = c(&quot;faa&quot; = &quot;dest&quot;)) are US airports that don’t have a flight in the data, meaning that there were no flights to that aiport from New York in 2013. You might expect that there’s an implicit relationship between plane and airline, because each plane is flown by a single airline. Confirm or reject this hypothesis using the tools you’ve learned above. There isn’t such a relationship, since planes can be sold or airlines can merge. However, that doesn’t necessarily mean that such a plane will appear in this data. There are eight planes which flights %&gt;% group_by(tailnum, carrier) %&gt;% count() %&gt;% filter(n() &gt; 1) %&gt;% select(tailnum) %&gt;% distinct() #&gt; Adding missing grouping variables: `carrier` #&gt; # A tibble: 0 x 2 #&gt; # Groups: tailnum, carrier [0] #&gt; # ... with 2 variables: carrier &lt;chr&gt;, tailnum &lt;chr&gt; 10.6 Set operations No exercises "]
]
