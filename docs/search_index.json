[
["graphics-for-communication.html", "27 Graphics for communication 27.1 Introduction 27.2 Label 27.3 Annotations 27.4 Scales", " 27 Graphics for communication 27.1 Introduction library(&quot;tidyverse&quot;) #&gt; ── Attaching packages ────────────────────────────────────── tidyverse 1.2.1 ── #&gt; ✔ ggplot2 2.2.1 ✔ purrr 0.2.4 #&gt; ✔ tibble 1.4.2 ✔ dplyr 0.7.4.9000 #&gt; ✔ tidyr 0.8.0 ✔ stringr 1.2.0 #&gt; ✔ readr 1.1.1 ✔ forcats 0.2.0 #&gt; ── Conflicts ───────────────────────────────────────── tidyverse_conflicts() ── #&gt; ✖ dplyr::filter() masks stats::filter() #&gt; ✖ dplyr::lag() masks stats::lag() library(&quot;modelr&quot;) library(&quot;lubridate&quot;) #&gt; Loading required package: methods #&gt; #&gt; Attaching package: &#39;lubridate&#39; #&gt; The following object is masked from &#39;package:base&#39;: #&gt; #&gt; date 27.2 Label 27.2.1 Exercises 27.2.1.1 Exercise 1 Create one plot on the fuel economy data with customized title, subtitle, caption, x, y, and colour labels. ggplot(data = mpg, mapping = aes(x = reorder(class, hwy, median), y = hwy)) + geom_boxplot() + coord_flip() + labs( title = &quot;Compact Cars have &gt; 10 Hwy MPG than Pickup Trucks&quot;, subtitle = &quot;Comparing the median highway mpg in each class&quot;, caption = &quot;Data from fueleconomy.gov&quot;, x = &quot;Car Class&quot;, y = &quot;Highway Miles per Gallon&quot; ) 27.2.2 Exercise 3 The geom_smooth() is somewhat misleading because the hwy for large engines is skewed upwards due to the inclusion of lightweight sports cars with big engines. Use your modeling tools to fit and display a better model. ggplot(mpg, aes(displ, hwy, colour = class)) + geom_point(aes(colour = class)) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + labs( title = &quot;Fuel efficiency generally decreases with engine size&quot;, subtitle = &quot;Subcompact cars show the greatest sensitivity to engine size&quot;, caption = &quot;Data from fueleconomy.gov&quot; ) mod &lt;- lm(hwy ~ class, data = mpg) mpg %&gt;% add_residuals(mod) %&gt;% ggplot(aes(displ, resid)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) + labs( title = &quot;Fuel efficiency decreases with engine size&quot;, subtitle = &quot;Highway MPG for Cars After Subtracing Mean MPG of their Class&quot;, caption = &quot;Data from fueleconomy.gov&quot;, x = &quot;Highway MPG Relative to Class&quot;, y = &quot;Engine Displacement&quot; ) 27.2.2.1 Exercise 3 Take an exploratory graphic that you’ve created in the last month, and add informative titles to make it easier for others to understand. This exercise is by is intrinsically left to readers. 27.3 Annotations 27.3.1 Exercises 27.3.1.1 Exercise 1 Use geom_text() with infinite positions to place text at the four corners of the plot. I can use similar code as the example in the text. However, I need to use vjust and hjust in order for the text to appear in the plot, and these need to be different for each corner. But, geom_text takes hjust and vjust as aesthetics, I can add them to the data and mappings, and use a single geom_text call instead of four different geom_text calls with four different data arguments, and four different values of hjust and vjust arguments. label &lt;- tribble( ~displ, ~hwy, ~label, ~vjust, ~hjust, Inf, Inf, &quot;Top right&quot;, &quot;top&quot;, &quot;right&quot;, Inf, -Inf, &quot;Bottom right&quot;, &quot;bottom&quot;, &quot;right&quot;, -Inf, Inf, &quot;Top left&quot;, &quot;top&quot;, &quot;left&quot;, -Inf, -Inf, &quot;Bottom left&quot;, &quot;bottom&quot;, &quot;left&quot; ) ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_text(aes(label = label, vjust = vjust, hjust = hjust), data = label) 27.3.1.2 Exercise 2 Read the documentation for annotate(). How can you use it to add a text label to a plot without having to create a tibble? With annotate you use what would be aesthetic mappings directly as arguments: ggplot(mpg, aes(displ, hwy)) + geom_point() + annotate(&quot;text&quot;, x = Inf, y = Inf, label = &quot;Increasing engine size is \\nrelated to decreasing fuel economy.&quot;, vjust = &quot;top&quot;, hjust = &quot;right&quot;) 27.3.1.3 Exercise 3 How do labels with geom_text() interact with faceting? How can you add a label to a single facet? How can you put a different label in each facet? (Hint: think about the underlying data.) If the facet variable is not specified, the text is drawn in all facets. label &lt;- tibble( displ = Inf, hwy = Inf, label = &quot;Increasing engine size is \\nrelated to decreasing fuel economy.&quot; ) ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_text(aes(label = label), data = label, vjust = &quot;top&quot;, hjust = &quot;right&quot;, size = 2) + facet_wrap(~ class) To draw the label in only one facet, add a column to the label data frame with the value of the faceting variable(s) in which to draw it. label &lt;- tibble( displ = Inf, hwy = Inf, class = &quot;2seater&quot;, label = &quot;Increasing engine size is \\nrelated to decreasing fuel economy.&quot; ) ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_text(aes(label = label), data = label, vjust = &quot;top&quot;, hjust = &quot;right&quot;, size = 2) + facet_wrap(~ class) To draw labels in different plots, simply have the facetting variable(s): label &lt;- tibble( displ = Inf, hwy = Inf, class = unique(mpg$class), label = stringr::str_c(&quot;Label for &quot;, class) ) ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_text(aes(label = label), data = label, vjust = &quot;top&quot;, hjust = &quot;right&quot;, size = 3) + facet_wrap(~ class) 27.3.1.4 Exercise 4 What arguments to geom_label() control the appearance of the background box? label.padding: padding around label label.r: amount of rounding in the corners label.size: size of label border 27.3.1.5 Exercise 5 What are the four arguments to arrow()? How do they work? Create a series of plots that demonstrate the most important options. The four arguments are: (from the help for arrow) - angle : angle of arrow head - length : length of the arrow head - ends: ends of the line to draw arrow head - type: &quot;open&quot; or &quot;close&quot;: whether the arrow head is a closed or open triangle 27.4 Scales 27.4.1 Exercises 27.4.1.1 Exercise 1 Why doesn’t the following code override the default scale? df &lt;- tibble( x = rnorm(10000), y = rnorm(10000) ) ggplot(df, aes(x, y)) + geom_hex() + scale_colour_gradient(low = &quot;white&quot;, high = &quot;red&quot;) + coord_fixed() It does not override the default scale because the colors in geom_hex are set by the fill aesthetic, not the color aesthetic. ggplot(df, aes(x, y)) + geom_hex() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;red&quot;) + coord_fixed() 27.4.1.2 Exercise 2 The first argument to every scale is the label for the scale. It is equivalent to using the labs function. ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = class)) + geom_smooth(se = FALSE) + labs( x = &quot;Engine displacement (L)&quot;, y = &quot;Highway fuel economy (mpg)&quot;, colour = &quot;Car type&quot; ) #&gt; `geom_smooth()` using method = &#39;loess&#39; ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = class)) + geom_smooth(se = FALSE) + scale_x_continuous(&quot;Engine displacement (L)&quot;) + scale_y_continuous(&quot;Highway fuel economy (mpg)&quot;) + scale_colour_discrete(&quot;Car type&quot;) #&gt; `geom_smooth()` using method = &#39;loess&#39; 27.4.1.3 Exercise 3 Change the display of the presidential terms by: Combining the two variants shown above. Improving the display of the y axis. Labelling each term with the name of the president. Adding informative plot labels. Placing breaks every 4 years (this is trickier than it seems!). years &lt;- lubridate::make_date(seq(year(min(presidential$start)), year(max(presidential$end)), by = 4), 1, 1) presidential %&gt;% mutate(id = 33 + row_number(), name_id = stringr::str_c(name, &quot; (&quot;, id, &quot;)&quot;), name_id = factor(name_id, levels = name_id)) %&gt;% ggplot(aes(start, name_id, colour = party)) + geom_point() + geom_segment(aes(xend = end, yend = name_id)) + scale_colour_manual(values = c(Republican = &quot;red&quot;, Democratic = &quot;blue&quot;)) + scale_y_discrete(NULL) + scale_x_date(NULL, breaks = years, date_labels = &quot;&#39;%y&quot;) + theme(panel.grid.minor = element_blank()) 27.4.1.4 Exercise 4 Use override.aes to make the legend on the following plot easier to see. ggplot(diamonds, aes(carat, price)) + geom_point(aes(colour = cut), alpha = 1/20) The problem with the legend is that the alpha value make the colors hard to see. So I’ll override the alpha value to make the points solid in the legend. ggplot(diamonds, aes(carat, price)) + geom_point(aes(colour = cut), alpha = 1/20) + theme(legend.position = &quot;bottom&quot;) + guides(colour = guide_legend(nrow = 1, override.aes = list(alpha = 1))) "]
]
